{
	"swagger":"2.0",
	"info":{
		"version":"1.0.0",
		"title":"twitabout-ui"
	},
	"basePath":"/api",
	"consumes":[
		"application/json",
		"application/x-www-form-urlencoded",
		"application/xml",
		"text/xml"
	],
	"produces":[
		"application/json",
		"application/xml",
		"text/xml",
		"application/javascript",
		"text/javascript"
	],
	"paths":{
		"/Users/{id}/accessTokens/{fk}":{
			"get":{
				"tags":[
					"User"
				],
				"summary":"Find a related item by id for accessTokens.",
				"operationId":"User.prototype.__findById__accessTokens",
				"parameters":[
					{
						"name":"fk",
						"in":"path",
						"description":"Foreign key for accessTokens",
						"required":true,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/AccessToken"
						}
					}
				},
				"deprecated":false
			},
			"delete":{
				"tags":[
					"User"
				],
				"summary":"Delete a related item by id for accessTokens.",
				"operationId":"User.prototype.__destroyById__accessTokens",
				"parameters":[
					{
						"name":"fk",
						"in":"path",
						"description":"Foreign key for accessTokens",
						"required":true,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"204":{
						"description":"Request was successful"
					}
				},
				"deprecated":false
			},
			"put":{
				"tags":[
					"User"
				],
				"summary":"Update a related item by id for accessTokens.",
				"operationId":"User.prototype.__updateById__accessTokens",
				"parameters":[
					{
						"name":"fk",
						"in":"path",
						"description":"Foreign key for accessTokens",
						"required":true,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"data",
						"in":"body",
						"required":false,
						"schema":{
							"$ref":"#/definitions/AccessToken"
						}
					},
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/AccessToken"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/{id}/accessTokens":{
			"get":{
				"tags":[
					"User"
				],
				"summary":"Queries accessTokens of User.",
				"operationId":"User.prototype.__get__accessTokens",
				"parameters":[
					{
						"name":"filter",
						"in":"query",
						"required":false,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"array",
							"items":{
								"$ref":"#/definitions/AccessToken"
							}
						}
					}
				},
				"deprecated":false
			},
			"post":{
				"tags":[
					"User"
				],
				"summary":"Creates a new instance in accessTokens of this model.",
				"operationId":"User.prototype.__create__accessTokens",
				"parameters":[
					{
						"name":"data",
						"in":"body",
						"required":false,
						"schema":{
							"$ref":"#/definitions/AccessToken"
						}
					},
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/AccessToken"
						}
					}
				},
				"deprecated":false
			},
			"delete":{
				"tags":[
					"User"
				],
				"summary":"Deletes all accessTokens of this model.",
				"operationId":"User.prototype.__delete__accessTokens",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"204":{
						"description":"Request was successful"
					}
				},
				"deprecated":false
			}
		},
		"/Users/{id}/accessTokens/count":{
			"get":{
				"tags":[
					"User"
				],
				"summary":"Counts accessTokens of User.",
				"operationId":"User.prototype.__count__accessTokens",
				"parameters":[
					{
						"name":"where",
						"in":"query",
						"description":"Criteria to match model instances",
						"required":false,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users":{
			"post":{
				"tags":[
					"User"
				],
				"summary":"Create a new instance of the model and persist it into the data source.",
				"operationId":"User.create",
				"parameters":[
					{
						"name":"data",
						"in":"body",
						"description":"Model instance data",
						"required":false,
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				},
				"deprecated":false
			},
			"put":{
				"tags":[
					"User"
				],
				"summary":"Update an existing model instance or insert a new one into the data source.",
				"operationId":"User.upsert",
				"parameters":[
					{
						"name":"data",
						"in":"body",
						"description":"Model instance data",
						"required":false,
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				},
				"deprecated":false
			},
			"get":{
				"tags":[
					"User"
				],
				"summary":"Find all instances of the model matched by filter from the data source.",
				"operationId":"User.find",
				"parameters":[
					{
						"name":"filter",
						"in":"query",
						"description":"Filter defining fields, where, include, order, offset, and limit",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"array",
							"items":{
								"$ref":"#/definitions/User"
							}
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/{id}/exists":{
			"get":{
				"tags":[
					"User"
				],
				"summary":"Check whether a model instance exists in the data source.",
				"operationId":"User.exists",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/{id}":{
			"head":{
				"tags":[
					"User"
				],
				"summary":"Check whether a model instance exists in the data source.",
				"operationId":"User.exists",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			},
			"get":{
				"tags":[
					"User"
				],
				"summary":"Find a model instance by id from the data source.",
				"operationId":"User.findById",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"filter",
						"in":"query",
						"description":"Filter defining fields and include",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				},
				"deprecated":false
			},
			"delete":{
				"tags":[
					"User"
				],
				"summary":"Delete a model instance by id from the data source.",
				"operationId":"User.deleteById",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			},
			"put":{
				"tags":[
					"User"
				],
				"summary":"Update attributes for a model instance and persist it into the data source.",
				"operationId":"User.prototype.updateAttributes",
				"parameters":[
					{
						"name":"data",
						"in":"body",
						"description":"An object of model property name/value pairs",
						"required":false,
						"schema":{
							"$ref":"#/definitions/User"
						}
					},
					{
						"name":"id",
						"in":"path",
						"description":"User id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/findOne":{
			"get":{
				"tags":[
					"User"
				],
				"summary":"Find first instance of the model matched by filter from the data source.",
				"operationId":"User.findOne",
				"parameters":[
					{
						"name":"filter",
						"in":"query",
						"description":"Filter defining fields, where, include, order, offset, and limit",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/update":{
			"post":{
				"tags":[
					"User"
				],
				"summary":"Update instances of the model matched by where from the data source.",
				"operationId":"User.updateAll",
				"parameters":[
					{
						"name":"where",
						"in":"query",
						"description":"Criteria to match model instances",
						"required":false,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"data",
						"in":"body",
						"description":"An object of model property name/value pairs",
						"required":false,
						"schema":{
							"$ref":"#/definitions/User"
						}
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"description":"The number of instances updated",
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/count":{
			"get":{
				"tags":[
					"User"
				],
				"summary":"Count instances of the model matched by where from the data source.",
				"operationId":"User.count",
				"parameters":[
					{
						"name":"where",
						"in":"query",
						"description":"Criteria to match model instances",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/change-stream":{
			"post":{
				"tags":[
					"User"
				],
				"summary":"Create a change stream.",
				"operationId":"User.createChangeStream",
				"parameters":[
					{
						"name":"options",
						"in":"formData",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			},
			"get":{
				"tags":[
					"User"
				],
				"summary":"Create a change stream.",
				"operationId":"User.createChangeStream",
				"parameters":[
					{
						"name":"options",
						"in":"query",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/login":{
			"post":{
				"tags":[
					"User"
				],
				"summary":"Login a user with username/email and password.",
				"operationId":"User.login",
				"parameters":[
					{
						"name":"credentials",
						"in":"body",
						"required":true,
						"schema":{
							"type":"object"
						}
					},
					{
						"name":"include",
						"in":"query",
						"description":"Related objects to include in the response. See the description of return value for more details.",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"description":"The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n  - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n\n",
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/Users/logout":{
			"post":{
				"tags":[
					"User"
				],
				"summary":"Logout a user with access token.",
				"operationId":"User.logout",
				"parameters":[
					
				],
				"responses":{
					"204":{
						"description":"Request was successful"
					}
				},
				"deprecated":false
			}
		},
		"/Users/confirm":{
			"get":{
				"tags":[
					"User"
				],
				"summary":"Confirm a user registration with email verification token.",
				"operationId":"User.confirm",
				"parameters":[
					{
						"name":"uid",
						"in":"query",
						"required":true,
						"type":"string"
					},
					{
						"name":"token",
						"in":"query",
						"required":true,
						"type":"string"
					},
					{
						"name":"redirect",
						"in":"query",
						"required":false,
						"type":"string"
					}
				],
				"responses":{
					"204":{
						"description":"Request was successful"
					}
				},
				"deprecated":false
			}
		},
		"/Users/reset":{
			"post":{
				"tags":[
					"User"
				],
				"summary":"Reset password for a user with email.",
				"operationId":"User.resetPassword",
				"parameters":[
					{
						"name":"options",
						"in":"body",
						"required":true,
						"schema":{
							"type":"object"
						}
					}
				],
				"responses":{
					"204":{
						"description":"Request was successful"
					}
				},
				"deprecated":false
			}
		},
		"/followlog":{
			"post":{
				"tags":[
					"FollowLog"
				],
				"summary":"Create a new instance of the model and persist it into the data source.",
				"operationId":"FollowLog.create",
				"parameters":[
					{
						"name":"data",
						"in":"body",
						"description":"Model instance data",
						"required":false,
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				},
				"deprecated":false
			},
			"put":{
				"tags":[
					"FollowLog"
				],
				"summary":"Update an existing model instance or insert a new one into the data source.",
				"operationId":"FollowLog.upsert",
				"parameters":[
					{
						"name":"data",
						"in":"body",
						"description":"Model instance data",
						"required":false,
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				},
				"deprecated":false
			},
			"get":{
				"tags":[
					"FollowLog"
				],
				"summary":"Find all instances of the model matched by filter from the data source.",
				"operationId":"FollowLog.find",
				"parameters":[
					{
						"name":"filter",
						"in":"query",
						"description":"Filter defining fields, where, include, order, offset, and limit",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"array",
							"items":{
								"$ref":"#/definitions/FollowLog"
							}
						}
					}
				},
				"deprecated":false
			}
		},
		"/followlog/{id}/exists":{
			"get":{
				"tags":[
					"FollowLog"
				],
				"summary":"Check whether a model instance exists in the data source.",
				"operationId":"FollowLog.exists",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/followlog/{id}":{
			"head":{
				"tags":[
					"FollowLog"
				],
				"summary":"Check whether a model instance exists in the data source.",
				"operationId":"FollowLog.exists",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			},
			"get":{
				"tags":[
					"FollowLog"
				],
				"summary":"Find a model instance by id from the data source.",
				"operationId":"FollowLog.findById",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"filter",
						"in":"query",
						"description":"Filter defining fields and include",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				},
				"deprecated":false
			},
			"delete":{
				"tags":[
					"FollowLog"
				],
				"summary":"Delete a model instance by id from the data source.",
				"operationId":"FollowLog.deleteById",
				"parameters":[
					{
						"name":"id",
						"in":"path",
						"description":"Model id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			},
			"put":{
				"tags":[
					"FollowLog"
				],
				"summary":"Update attributes for a model instance and persist it into the data source.",
				"operationId":"FollowLog.prototype.updateAttributes",
				"parameters":[
					{
						"name":"data",
						"in":"body",
						"description":"An object of model property name/value pairs",
						"required":false,
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					},
					{
						"name":"id",
						"in":"path",
						"description":"PersistedModel id",
						"required":true,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				},
				"deprecated":false
			}
		},
		"/followlog/findOne":{
			"get":{
				"tags":[
					"FollowLog"
				],
				"summary":"Find first instance of the model matched by filter from the data source.",
				"operationId":"FollowLog.findOne",
				"parameters":[
					{
						"name":"filter",
						"in":"query",
						"description":"Filter defining fields, where, include, order, offset, and limit",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				},
				"deprecated":false
			}
		},
		"/followlog/update":{
			"post":{
				"tags":[
					"FollowLog"
				],
				"summary":"Update instances of the model matched by where from the data source.",
				"operationId":"FollowLog.updateAll",
				"parameters":[
					{
						"name":"where",
						"in":"query",
						"description":"Criteria to match model instances",
						"required":false,
						"type":"string",
						"format":"JSON"
					},
					{
						"name":"data",
						"in":"body",
						"description":"An object of model property name/value pairs",
						"required":false,
						"schema":{
							"$ref":"#/definitions/FollowLog"
						}
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"description":"The number of instances updated",
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/followlog/count":{
			"get":{
				"tags":[
					"FollowLog"
				],
				"summary":"Count instances of the model matched by where from the data source.",
				"operationId":"FollowLog.count",
				"parameters":[
					{
						"name":"where",
						"in":"query",
						"description":"Criteria to match model instances",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		},
		"/followlog/change-stream":{
			"post":{
				"tags":[
					"FollowLog"
				],
				"summary":"Create a change stream.",
				"operationId":"FollowLog.createChangeStream",
				"parameters":[
					{
						"name":"options",
						"in":"formData",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			},
			"get":{
				"tags":[
					"FollowLog"
				],
				"summary":"Create a change stream.",
				"operationId":"FollowLog.createChangeStream",
				"parameters":[
					{
						"name":"options",
						"in":"query",
						"required":false,
						"type":"string",
						"format":"JSON"
					}
				],
				"responses":{
					"200":{
						"description":"Request was successful",
						"schema":{
							"type":"object"
						}
					}
				},
				"deprecated":false
			}
		}
	},
	"definitions":{
		"x-any":{
			"properties":{
				
			}
		},
		"AccessToken":{
			"properties":{
				"id":{
					"type":"string"
				},
				"ttl":{
					"default":1209600,
					"description":"time to live in seconds (2 weeks by default)",
					"type":"number",
					"format":"double"
				},
				"created":{
					"type":"string",
					"format":"date"
				},
				"userId":{
					"type":"number",
					"format":"double"
				}
			},
			"required":[
				"id"
			],
			"additionalProperties":false
		},
		"User":{
			"properties":{
				"realm":{
					"type":"string"
				},
				"username":{
					"type":"string"
				},
				"credentials":{
					"type":"object"
				},
				"challenges":{
					"type":"object"
				},
				"email":{
					"type":"string"
				},
				"emailVerified":{
					"type":"boolean"
				},
				"verificationToken":{
					"type":"string"
				},
				"status":{
					"type":"string"
				},
				"created":{
					"type":"string",
					"format":"date"
				},
				"lastUpdated":{
					"type":"string",
					"format":"date"
				},
				"id":{
					"type":"number",
					"format":"double"
				}
			},
			"required":[
				"email"
			],
			"additionalProperties":false
		},
		"RoleMapping":{
			"description":"Map principals to roles",
			"properties":{
				"id":{
					"type":"number",
					"format":"double"
				},
				"principalType":{
					"description":"The principal type, such as user, application, or role",
					"type":"string"
				},
				"principalId":{
					"type":"string"
				},
				"roleId":{
					"type":"number",
					"format":"double"
				}
			},
			"additionalProperties":false
		},
		"Role":{
			"properties":{
				"id":{
					"type":"number",
					"format":"double"
				},
				"name":{
					"type":"string"
				},
				"description":{
					"type":"string"
				},
				"created":{
					"type":"string",
					"format":"date"
				},
				"modified":{
					"type":"string",
					"format":"date"
				}
			},
			"required":[
				"name"
			],
			"additionalProperties":false
		},
		"FollowLog":{
			"properties":{
				"id":{
					"type":"number",
					"format":"double"
				},
				"screen_name":{
					"type":"string"
				},
				"name":{
					"type":"string"
				},
				"followed_on":{
					"type":"string",
					"format":"date"
				},
				"unfollowed_on":{
					"type":"string",
					"format":"date"
				}
			},
			"required":[
				"screen_name"
			],
			"additionalProperties":false
		}
	},
	"tags":[
		{
			"name":"User"
		},
		{
			"name":"FollowLog"
		}
	]
}